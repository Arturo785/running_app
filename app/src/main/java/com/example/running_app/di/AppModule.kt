package com.example.running_app.di

import android.content.Context
import androidx.room.Room
import com.example.running_app.db.RunDB
import com.example.running_app.utils.RUN_DATABASE_NAME
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Singleton

// installs the module in the appComponent that is autogenerated
// by dagger and then automatically called in the onCreate in BaseApplication(our base file)
// without having to override it the onCreate making our dependencies to be available on the life of the whole application
// if needed (depends on the scope we give)

//ApplicationComponent * all the application lifetime
//ActivityComponent * all the activity lifetime
@Module
@InstallIn(ApplicationComponent::class)
object AppModule{

    @Singleton // will only be one without this creates multiple instances when called
    @Provides // tells dagger that this provides something (the db in this case)
    fun provideRunDatabase(
       @ApplicationContext app : Context // this annotation gives us the appContext under the hood (dagger does it)
    ) = Room.databaseBuilder(
        app,
        RunDB::class.java,
        RUN_DATABASE_NAME
    ).build()


    @Singleton
    @Provides// dagger knows how to create the Db because we did it in the previous provide method
    fun providesRunDao(db : RunDB) = db.getRunDao()  // is not a must to be up or down just to be a way to create it
}